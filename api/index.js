const express=require('express');
const app = express();
const mongoose=require('mongoose');
const User=require('./models/user');
const bcrypt=require('bcryptjs');
const jwt=require('jsonwebtoken');
const cors = require('cors');
const cookieparser=require('cookie-parser');

const multer = require('multer');
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
      cb(null, 'uploads'); // Save files to the 'uploads' directory
    },
    filename: function (req, file, cb) {
      cb(null, file.originalname); // Keep the original file name
    }
  });
  const Post=require('./models/post');
  app.use('/uploads', express.static(__dirname+'/uploads'));
  // Initialize multer middleware
const upload = multer({ storage: storage });
app.use(cors({
  origin: 'http://localhost:3000', // Adjust to your frontend's URL
  credentials: true // Allow cookies to be sent with requests
}));
app.use(express.json());
app.use(cookieparser());

const salt=bcrypt.genSaltSync(10);
const secret='7nskihwuinu9jg09jt85';

mongoose.connect("mongodb://0.0.0.0/mern-blog", { useNewUrlParser: true, useUnifiedTopology: true }).then(() => console.log("Connected to MongoDB"))
app.post('/register',async (req,res)=>{
    const {name, password}=req.body;
    try{
        const data=await User.create({name, password:bcrypt.hashSync(password, salt)})
      res.json(data);
      console.log(data)
    } catch(e){
        res.status(404).json(e);
    }
    
})

app.post('/login',async (req,res)=>{
    const {name, password}=req.body;
    const data=await User.findOne({name});
    const test=await bcrypt.compareSync(password,data.password);
    if(test){
       jwt.sign({name,id:data._id},secret,{},(err,token)=>{
          if(err) throw err;
          res.cookie("token",token).json({
            id:data._id,
            name
          });
       });
    }
})

app.get('/profile', async (req,res)=>{

    const {token}=req.cookies;
    await jwt.verify(token,secret,{},async (err,info)=>{
        if(err) throw err;
        await res.json(info);
    });
    
})

app.post('/logout',(req,res)=>{
    res.cookie("token","").json("ok");
})

app.post('/post',upload.single('file'),async (req,res)=>{
 
    const {originalname,path}=req.file;
 const {title,summary,content} = req.body; 
 
 
 const {token}=req.cookies;
     jwt.verify(token,secret,{},async (err,info)=>{
        if(err) throw err;
        const doc=await Post.create({
            title,
            summary,
            content,
            cover:'uploads/'+originalname,
            author:info.id,
            
         })
         console.log(originalname,path)
         res.json(doc)
        
    });

 

});

app.get('/post', async (req, res) => {
  try {
    const posts = await Post.find().populate('author', ['name']).sort({ createdAt: -1 }).limit(20);
    console.log(posts);
    res.json(posts);
  } catch (error) {
    console.error('Error fetching posts:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});




app.get('/post/:id',async (req,res)=>{
  const {id}=req.params;
 
  const doc=await Post.findById(id).populate('author',['name']);
  
   res.json(doc);
 })

 app.put('/post', upload.single('file'), async (req, res) => {
  try {
    let cover = ''; // Default cover image path
    if (req.file) {
      cover = 'uploads/'+req.file.filename; // Use the filename generated by multer
    }
    console.log("from put api", cover);

    const token = req.cookies.token; // Retrieve token from cookies
    if (!token) {
      return res.status(401).json({ message: 'Unauthorized: Missing token' });
    }

    // Verify the JWT token
    let info;
    try {
      info = jwt.verify(token, secret);
    } catch (err) {
      return res.status(401).json({ message: 'Unauthorized: Invalid token' });
    }

    // Extract fields from the request body
    const { id, title, summary, content } = req.body;

    // Find the post by ID
    const post = await Post.findById(id);
    if (!post) {
      return res.status(404).json({ message: 'Post not found' });
    }

    // Check if the user is authorized to update the post
    if (post.author.toString() !== info.id) {
      return res.status(403).json({ message: 'Unauthorized: You are not the author of this post' });
    }

    // Update the post fields
    post.title = title;
    post.summary = summary;
    post.content = content;
    post.cover = cover;

    // Save the updated post
    await post.save();

    // Send a success response with the updated post
    res.status(200).json({ message: 'Post updated successfully', updatedPost: post });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal server error' });
  }
});



app.listen(8000);